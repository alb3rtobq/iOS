//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `AddBudgetViewController`, and contains static references to 2 segues.
    struct addBudgetViewController {
      /// Segue identifier `modalVC`.
      static let modalVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddBudgetViewController, ModalCycleViewController> = Rswift.StoryboardSegueIdentifier(identifier: "modalVC")
      /// Segue identifier `reEnterModalVC`.
      static let reEnterModalVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddBudgetViewController, ModalCycleViewController> = Rswift.StoryboardSegueIdentifier(identifier: "reEnterModalVC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `modalVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func modalVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddBudgetViewController, ModalCycleViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addBudgetViewController.modalVC, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `reEnterModalVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func reEnterModalVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddBudgetViewController, ModalCycleViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addBudgetViewController.reEnterModalVC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `BudgetListViewController`, and contains static references to 1 segues.
    struct budgetListViewController {
      /// Segue identifier `editBudgetName`.
      static let editBudgetName: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BudgetListViewController, EditBudgetNameViewController> = Rswift.StoryboardSegueIdentifier(identifier: "editBudgetName")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `editBudgetName`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func editBudgetName(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BudgetListViewController, EditBudgetNameViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.budgetListViewController.editBudgetName, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 19 images.
  struct image {
    /// Image `BGButton`.
    static let bgButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "BGButton")
    /// Image `BGHexButton`.
    static let bgHexButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "BGHexButton")
    /// Image `BGLaunch`.
    static let bgLaunch = Rswift.ImageResource(bundle: R.hostingBundle, name: "BGLaunch")
    /// Image `BGRecord`.
    static let bgRecord = Rswift.ImageResource(bundle: R.hostingBundle, name: "BGRecord")
    /// Image `BG_`.
    static let bg_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "BG_")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `fondoA`.
    static let fondoA = Rswift.ImageResource(bundle: R.hostingBundle, name: "fondoA")
    /// Image `fondoLista`.
    static let fondoLista = Rswift.ImageResource(bundle: R.hostingBundle, name: "fondoLista")
    /// Image `fullComment`.
    static let fullComment = Rswift.ImageResource(bundle: R.hostingBundle, name: "fullComment")
    /// Image `help1`.
    static let help1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "help1")
    /// Image `help2`.
    static let help2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "help2")
    /// Image `help3`.
    static let help3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "help3")
    /// Image `help4`.
    static let help4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "help4")
    /// Image `help5`.
    static let help5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "help5")
    /// Image `login`.
    static let login = Rswift.ImageResource(bundle: R.hostingBundle, name: "login")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `noComment`.
    static let noComment = Rswift.ImageResource(bundle: R.hostingBundle, name: "noComment")
    /// Image `questionMark`.
    static let questionMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "questionMark")
    /// Image `trash_bin`.
    static let trash_bin = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash_bin")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BGButton", bundle: ..., traitCollection: ...)`
    static func bgButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BGHexButton", bundle: ..., traitCollection: ...)`
    static func bgHexButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgHexButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BGLaunch", bundle: ..., traitCollection: ...)`
    static func bgLaunch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgLaunch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BGRecord", bundle: ..., traitCollection: ...)`
    static func bgRecord(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgRecord, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BG_", bundle: ..., traitCollection: ...)`
    static func bg_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fondoA", bundle: ..., traitCollection: ...)`
    static func fondoA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fondoA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fondoLista", bundle: ..., traitCollection: ...)`
    static func fondoLista(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fondoLista, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fullComment", bundle: ..., traitCollection: ...)`
    static func fullComment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fullComment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help1", bundle: ..., traitCollection: ...)`
    static func help1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help2", bundle: ..., traitCollection: ...)`
    static func help2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help3", bundle: ..., traitCollection: ...)`
    static func help3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help4", bundle: ..., traitCollection: ...)`
    static func help4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help5", bundle: ..., traitCollection: ...)`
    static func help5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login", bundle: ..., traitCollection: ...)`
    static func login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noComment", bundle: ..., traitCollection: ...)`
    static func noComment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noComment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "questionMark", bundle: ..., traitCollection: ...)`
    static func questionMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.questionMark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash_bin", bundle: ..., traitCollection: ...)`
    static func trash_bin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash_bin, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `BudgetNameHeaderView`.
    static let budgetNameHeaderView = _R.nib._BudgetNameHeaderView()
    /// Nib `BudgetTableViewCell`.
    static let budgetTableViewCell = _R.nib._BudgetTableViewCell()
    /// Nib `TransactionTableViewCell`.
    static let transactionTableViewCell = _R.nib._TransactionTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BudgetNameHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.budgetNameHeaderView) instead")
    static func budgetNameHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.budgetNameHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BudgetTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.budgetTableViewCell) instead")
    static func budgetTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.budgetTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionTableViewCell) instead")
    static func transactionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionTableViewCell)
    }
    #endif

    static func budgetNameHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BudgetNameHeaderView? {
      return R.nib.budgetNameHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BudgetNameHeaderView
    }

    static func budgetTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BudgetTableViewCell? {
      return R.nib.budgetTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BudgetTableViewCell
    }

    static func transactionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionTableViewCell? {
      return R.nib.transactionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BudgetTableViewCell`.
    static let budgetTableViewCell: Rswift.ReuseIdentifier<BudgetTableViewCell> = Rswift.ReuseIdentifier(identifier: "BudgetTableViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BudgetNameHeaderView.validate()
      try _BudgetTableViewCell.validate()
      try _TransactionTableViewCell.validate()
    }

    struct _BudgetNameHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BudgetNameHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BudgetNameHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BudgetNameHeaderView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "chevron.left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chevron.left' is used in nib 'BudgetNameHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chevron.right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chevron.right' is used in nib 'BudgetNameHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BudgetTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BudgetTableViewCell

      let bundle = R.hostingBundle
      let identifier = "BudgetTableViewCell"
      let name = "BudgetTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BudgetTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BudgetTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "circle.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle.fill' is used in nib 'BudgetTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lock' is used in nib 'BudgetTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lock.open", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lock.open' is used in nib 'BudgetTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "square.and.arrow.down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'square.and.arrow.down' is used in nib 'BudgetTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "square.and.arrow.up", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'square.and.arrow.up' is used in nib 'BudgetTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TransactionTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TransactionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "square.and.arrow.down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'square.and.arrow.down' is used in nib 'TransactionTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "square.and.arrow.up", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'square.and.arrow.up' is used in nib 'TransactionTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "BGLaunch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BGLaunch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarViewController

      let addBudgetViewController = StoryboardViewControllerResource<AddBudgetViewController>(identifier: "AddBudgetViewController")
      let budgetHelpViewController = StoryboardViewControllerResource<BudgetHelpViewController>(identifier: "BudgetHelpViewController")
      let budgetListViewController = StoryboardViewControllerResource<BudgetListViewController>(identifier: "BudgetListViewController")
      let budgetRecordViewController = StoryboardViewControllerResource<BudgetRecordViewController>(identifier: "BudgetRecordViewController")
      let bundle = R.hostingBundle
      let editBudgetNameViewController = StoryboardViewControllerResource<EditBudgetNameViewController>(identifier: "EditBudgetNameViewController")
      let loginBudgetViewController = StoryboardViewControllerResource<LoginBudgetViewController>(identifier: "LoginBudgetViewController")
      let modalCycleViewController = StoryboardViewControllerResource<ModalCycleViewController>(identifier: "modalCycleViewController")
      let modifyBudgetViewController = StoryboardViewControllerResource<ModifyBudgetViewController>(identifier: "ModifyBudgetViewController")
      let name = "Main"
      let settingViewController = StoryboardViewControllerResource<SettingViewController>(identifier: "SettingViewController")
      let tabBarViewController = StoryboardViewControllerResource<TabBarViewController>(identifier: "TabBarViewController")

      func addBudgetViewController(_: Void = ()) -> AddBudgetViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addBudgetViewController)
      }

      func budgetHelpViewController(_: Void = ()) -> BudgetHelpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: budgetHelpViewController)
      }

      func budgetListViewController(_: Void = ()) -> BudgetListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: budgetListViewController)
      }

      func budgetRecordViewController(_: Void = ()) -> BudgetRecordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: budgetRecordViewController)
      }

      func editBudgetNameViewController(_: Void = ()) -> EditBudgetNameViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editBudgetNameViewController)
      }

      func loginBudgetViewController(_: Void = ()) -> LoginBudgetViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginBudgetViewController)
      }

      func modalCycleViewController(_: Void = ()) -> ModalCycleViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: modalCycleViewController)
      }

      func modifyBudgetViewController(_: Void = ()) -> ModifyBudgetViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: modifyBudgetViewController)
      }

      func settingViewController(_: Void = ()) -> SettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingViewController)
      }

      func tabBarViewController(_: Void = ()) -> TabBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBarViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "BGHexButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BGHexButton' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BG_", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BG_' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "book", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'book' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "circle.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle.fill' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clock' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fondoA", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fondoA' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fullComment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fullComment' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "help1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'help1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "help2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'help2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "help3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'help3' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "help4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'help4' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "help5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'help5' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "noComment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noComment' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus.app", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus.app' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus.rectangle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus.rectangle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "questionMark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'questionMark' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "table.badge.more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'table.badge.more' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wrench", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wrench' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xmark.rectangle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xmark.rectangle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xmark.square", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xmark.square' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().addBudgetViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addBudgetViewController' could not be loaded from storyboard 'Main' as 'AddBudgetViewController'.") }
        if _R.storyboard.main().budgetHelpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'budgetHelpViewController' could not be loaded from storyboard 'Main' as 'BudgetHelpViewController'.") }
        if _R.storyboard.main().budgetListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'budgetListViewController' could not be loaded from storyboard 'Main' as 'BudgetListViewController'.") }
        if _R.storyboard.main().budgetRecordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'budgetRecordViewController' could not be loaded from storyboard 'Main' as 'BudgetRecordViewController'.") }
        if _R.storyboard.main().editBudgetNameViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editBudgetNameViewController' could not be loaded from storyboard 'Main' as 'EditBudgetNameViewController'.") }
        if _R.storyboard.main().loginBudgetViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginBudgetViewController' could not be loaded from storyboard 'Main' as 'LoginBudgetViewController'.") }
        if _R.storyboard.main().modifyBudgetViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'modifyBudgetViewController' could not be loaded from storyboard 'Main' as 'ModifyBudgetViewController'.") }
        if _R.storyboard.main().settingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingViewController' could not be loaded from storyboard 'Main' as 'SettingViewController'.") }
        if _R.storyboard.main().tabBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBarViewController' could not be loaded from storyboard 'Main' as 'TabBarViewController'.") }
        if _R.storyboard.main().modalCycleViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'modalCycleViewController' could not be loaded from storyboard 'Main' as 'ModalCycleViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
